{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Fetapi","props","state","items","fetch","method","then","response","json","setState","this","className","TableContainer","component","Paper","Table","align","size","aria-label","TableHead","TableRow","TableCell","TableBody","map","item","scope","id","name","username","email","address","street","city","zipcode","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAsEeA,E,kDA7Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,IAHQ,E,gEAME,IAAD,OAElBC,MADY,6CACD,CACTC,OAAQ,QAEPC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACH,GACL,EAAKM,SAAS,CAAEN,MAAOA,S,+BAInB,IACFA,EAAUO,KAAKR,MAAfC,MACN,OACE,qBAAKQ,UAAU,MAAf,SACE,cAACC,EAAA,EAAD,CAAgBC,UAAWC,IAA3B,SACE,eAACC,EAAA,EAAD,CACEJ,WAAS,EACTK,MAAM,SACNC,KAAK,QACLC,aAAW,mBAJb,UAME,oBAAIF,MAAM,eACV,cAACG,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,iBACA,cAACA,EAAA,EAAD,CAAWL,MAAM,QAAjB,kBACA,cAACK,EAAA,EAAD,CAAWL,MAAM,QAAjB,sBACA,cAACK,EAAA,EAAD,CAAWL,MAAM,QAAjB,mBACA,cAACK,EAAA,EAAD,CAAWL,MAAM,QAAjB,oBACA,cAACK,EAAA,EAAD,CAAWL,MAAM,QAAjB,kBACA,cAACK,EAAA,EAAD,CAAWL,MAAM,QAAjB,uBAGJ,cAACM,EAAA,EAAD,UACGnB,EAAMoB,KAAI,SAACC,GAAD,OACT,eAACJ,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWR,UAAU,KAAKY,MAAM,MAAhC,SACGD,EAAKE,KAER,eAACL,EAAA,EAAD,CAAWL,MAAM,QAAjB,UAA0BQ,EAAKG,KAA/B,OACA,eAACN,EAAA,EAAD,CAAWL,MAAM,QAAjB,UAA0BQ,EAAKI,SAA/B,OACA,eAACP,EAAA,EAAD,CAAWL,MAAM,QAAjB,UAA0BQ,EAAKK,MAA/B,OACA,eAACR,EAAA,EAAD,CAAWL,MAAM,QAAjB,UAA0BQ,EAAKM,QAAQC,OAAvC,OACA,eAACV,EAAA,EAAD,CAAWL,MAAM,QAAjB,UAA0BQ,EAAKM,QAAQE,KAAvC,OACA,eAACX,EAAA,EAAD,CAAWL,MAAM,QAAjB,UAA0BQ,EAAKM,QAAQG,QAAvC,SATaT,EAAKE,oB,GA3CfQ,aCINC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB/B,MAAK,YAAkD,IAA/CgC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6700e1f6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nclass Fetapi extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: [],\n    };\n  }\n  componentDidMount() {\n    const url = \"https://jsonplaceholder.typicode.com/users\";\n    fetch(url, {\n      method: \"GET\",\n    })\n      .then((response) => response.json())\n      .then((items) => {\n        this.setState({ items: items });\n      });\n  }\n\n  render() {\n    var { items } = this.state;\n    return (\n      <div className=\"App\">\n        <TableContainer component={Paper}>\n          <Table\n            className\n            align=\"center\"\n            size=\"small\"\n            aria-label=\"customized table\"\n          >\n            <h2 align=\" Id proof \"></h2>\n            <TableHead>\n              <TableRow>\n                <TableCell>ID</TableCell>\n                <TableCell align=\"right\">NAME</TableCell>\n                <TableCell align=\"right\">USERNAME</TableCell>\n                <TableCell align=\"right\">EMAIL</TableCell>\n                <TableCell align=\"right\">STREET</TableCell>\n                <TableCell align=\"right\">CITY</TableCell>\n                <TableCell align=\"right\">CODE</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {items.map((item) => (\n                <TableRow key={item.id}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {item.id}\n                  </TableCell>\n                  <TableCell align=\"right\">{item.name} </TableCell>\n                  <TableCell align=\"right\">{item.username} </TableCell>\n                  <TableCell align=\"right\">{item.email} </TableCell>\n                  <TableCell align=\"right\">{item.address.street} </TableCell>\n                  <TableCell align=\"right\">{item.address.city} </TableCell>\n                  <TableCell align=\"right\">{item.address.zipcode} </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </div>\n    );\n  }\n}\nexport default Fetapi;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}